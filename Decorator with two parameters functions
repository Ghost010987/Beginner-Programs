from random import randrange

def show_call_and_return_details(f):
    """Decorate a function f so its call will display the 
        parameter value and return value. """
    func_name = f.__name__ # Get the functions name
    def execute_augmented(x, y):
        call_string = "{}({}, {})".format(func_name, x, y)
        print(">>>Calling " + call_string)
        result = f(x, y)
        print(result)
    return execute_augmented

@show_call_and_return_details
def max(x, y):
    """Determine the maximum of x and y """
    return x if x > y else y

@show_call_and_return_details
def gcd(m, n):
    """Uses Euclids method to compute the greatest common divisor 
    (Also called greatest common factor) of m and n. Return the GCD of m and n. """
    if n == 0:
        return m
    else:
        return gcd(n, m % n)
    
@show_call_and_return_details
def summation(begin, end):
    """Add up the integer in the range begin...end -1, inclusive """
    sum = 0
    while begin != end:
        sum += begin
        begin += 1
    return sum

@show_call_and_return_details
def star_rect(length, width):
    """ Draw a length x width rectangle with asterisks """
    for row in range(length):
        print('*' * width)

# Decorate the randrange function as before: Since we cannot alter its source code.

randrange = show_call_and_return_details(randrange)

max(420, 545)
print('--------------------------------')
max(545, 420)
print('--------------------------------')
max(420, 420)
print('--------------------------------')

gcd(420, 545)
print('--------------------------------')
gcd(545, 420)
print('--------------------------------')
gcd(420, 420)
print('--------------------------------')

summation(420, 545)
print('--------------------------------')

star_rect(11, 7)
print('--------------------------------')
star_rect(3, 9)
print('--------------------------------')
star_rect(9, 15)
print('--------------------------------')

print(randrange(10, 21), "is a pseudorandom integer in the range 10 to 20, inclusive")
