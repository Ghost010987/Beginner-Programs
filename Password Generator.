# Password Generator
import random, string
def password_generator(length=12):
    if length < 4:
        raise ValueError("Password length should be at least 4 characters.")
    
# Set character pools.
    lowercase = string.ascii_lowercase
    uppercase = string.ascii_uppercase
    digits = string.digits
    special_characters = string.punctuation

# Ensure the password contains at least one character from each pool.
    password = [
        random.choice(lowercase),
        random.choice(uppercase),
        random.choice(digits),
        random.choice(special_characters)
    ]

# Fill the rest of the password length with random choices from all pools.
    all_characters = lowercase + uppercase + digits + special_characters
    password += random.choices(all_characters, k=length - 4)

# Shuffle the password to ensure randomness.
    random.shuffle(password)
    return ''.join(password)

# Example usage
if __name__ == "__main__":
    try:
        length = int(input("Enter the desired password length (minimum 4): "))
        print("Generated Password:", password_generator(length))
    except ValueError as e:
        print(e)

# Password Strength Checker
import re
def check_password_strength(password):
    if len(password) < 8:
        return "Weak: Password must be at least 8 characters long."
    if not re.search(r"[a-z]", password):
        return "Weak: Password must contain at least one lowercase letter."
    if not re.search(r"[A-Z]", password):
        return "Weak: Password must contain at least one uppercase letter."
    if not re.search(r"[0-9]", password):
        return "Weak: Password must contain at least one digit."
    if not re.search(r"[!@#$%^&*(),.?\":{}|<>]", password):
        return "Weak: Password must contain at least one special character."
    return "Strong: Password meets all criteria."

# Example usage
if __name__ == "__main__":
    password = input("Enter a password to check its strength: ")
    print(check_password_strength(password))

